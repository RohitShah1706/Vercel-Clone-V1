import {PrismaClientKnownRequestError} from "@prisma/client/runtime/library";

const errorCodeToClass = {
	P1000: "PrismaAuthenticationFailedError",
	P1001: "PrismaDatabaseUnreachableError",
	P1002: "PrismaDatabaseTimeoutError",
	P1003: "PrismaDatabaseDoesNotExistError",
	P1008: "PrismaOperationTimeoutError",
	P1009: "PrismaDatabaseAlreadyExistsError",
	P1010: "PrismaUserAccessDeniedError",
	P1011: "PrismaTlsConnectionError",
	P1012: "PrismaSchemaValidationError",
	P1013: "PrismaInvalidDatabaseStringError",
	P1014: "PrismaUnderlyingModelError",
	P1015: "PrismaUnsupportedDatabaseVersionError",
	P1016: "PrismaIncorrectParametersError",
	P1017: "PrismaServerClosedConnectionError",
	P2000: "PrismaValueTooLongError",
	P2001: "PrismaRecordDoesNotExistError",
	P2002: "PrismaUniqueConstraintError",
	P2003: "PrismaForeignKeyConstraintError",
	P2004: "PrismaDatabaseConstraintError",
	P2005: "PrismaInvalidFieldValueError",
	P2006: "PrismaInvalidValueError",
	P2007: "PrismaDataValidationError",
	P2008: "PrismaQueryParsingError",
	P2009: "PrismaQueryValidationError",
	P2010: "PrismaRawQueryFailedError",
	P2011: "PrismaNullConstraintViolationError",
	P2012: "PrismaMissingRequiredValueError",
	P2013: "PrismaMissingRequiredArgumentError",
	P2014: "PrismaRelationViolationError",
	P2015: "PrismaRelatedRecordNotFoundError",
	P2016: "PrismaQueryInterpretationError",
	P2017: "PrismaRecordsNotConnectedError",
	P2018: "PrismaConnectedRecordsNotFoundError",
	P2019: "PrismaInputError",
	P2020: "PrismaValueOutOfRangeError",
	P2021: "PrismaTableDoesNotExistError",
	P2022: "PrismaColumnDoesNotExistError",
	P2023: "PrismaInconsistentColumnDataError",
	P2024: "PrismaConnectionPoolTimeoutError",
	P2025: "PrismaOperationFailedError",
	P2026: "PrismaUnsupportedFeatureError",
	P2027: "PrismaDatabaseQueryExecutionErrors",
	P2028: "PrismaTransactionApiError",
	P2030: "PrismaFulltextIndexNotFoundError",
	P2031: "PrismaMongoDBReplicaSetError",
	P2033: "PrismaNumberOutOfRangeError",
	P2034: "PrismaTransactionConflictError",
	P3000: "PrismaDatabaseCreationFailedError",
	P3001: "PrismaMigrationDestructiveChangesError",
	P3002: "PrismaMigrationRollbackError",
	P3003: "PrismaMigrationFormatChangedError",
	P3004: "PrismaSystemDatabaseAlterationError",
	P3005: "PrismaNonEmptySchemaError",
	P3006: "PrismaFailedMigrationError",
	P3007: "PrismaPreviewFeaturesBlockedError",
	P3008: "PrismaMigrationAlreadyAppliedError",
	P3009: "PrismaFailedMigrationsError",
	P3010: "PrismaMigrationNameTooLongError",
	P3011: "PrismaMigrationNotFoundForRollbackError",
	P3012: "PrismaMigrationNotInFailedStateError",
	P3013: "PrismaProviderArraysNotSupportedError",
	P3014: "PrismaShadowDatabaseCreationError",
	P3015: "PrismaMigrationFileNotFoundError",
	P3016: "PrismaDatabaseResetFallbackFailedError",
	P3017: "PrismaMigrationNotFoundError",
	P3018: "PrismaMigrationFailedToApplyError",
	P3019: "PrismaProviderMismatchError",
	P3020: "PrismaShadowDatabaseDisabledError",
	P3021: "PrismaNoForeignKeysError",
	P3022: "PrismaNoDirectDdlError",
	P4000: "PrismaIntrospectionFailedError",
	P4001: "PrismaEmptyIntrospectedDatabaseError",
	P4002: "PrismaInconsistentIntrospectedSchemaError",
	P5000: "PrismaDataProxyRequestError",
	P5001: "PrismaDataProxyRetryRequestError",
	P5002: "PrismaDataProxyInvalidDatasourceError",
	P5003: "PrismaDataProxyResourceNotFoundError",
	P5004: "PrismaDataProxyFeatureNotImplementedError",
	P5005: "PrismaDataProxySchemaUploadError",
	P5006: "PrismaDataProxyUnknownServerError",
	P5007: "PrismaDataProxyUnauthorizedError",
	P5008: "PrismaDataProxyUsageExceededError",
	P5009: "PrismaDataProxyRequestTimeoutError",
	P5010: "PrismaDataProxyFetchError",
	P5011: "PrismaDataProxyInvalidRequestParametersError",
	P5012: "PrismaDataProxyUnsupportedEngineVersionError",
	P5013: "PrismaDataProxyEngineStartupError",
	P5014: "PrismaDataProxyUnknownEngineStartupError",
	P5015: "PrismaDataProxyInteractiveTransactionError",
} as const;

type ErrorCode = keyof typeof errorCodeToClass;

export const toTypedPrismaError = (error: any) => {
	if (!(error instanceof PrismaClientKnownRequestError)) {
		return null;
	}
	const code: ErrorCode = error.code as ErrorCode;
	const ErrorClass = errorCodeToClass[code];
	if (!ErrorClass) {
		return null;
	}
	return ErrorClass;
};
